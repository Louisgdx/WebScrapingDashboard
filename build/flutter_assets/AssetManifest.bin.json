"DQ0HXUM6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNcYmRkXG5vdGVzLmNzdgwCDQEHBWFzc2V0B11DOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGJkZFxub3Rlcy5jc3YNAQcFYXNzZXQHFGFzc2V0cy9iZGQvbm90ZXMuY3N2B15DOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGJkZFxub3Rlcy5jc3Z+DAINAQcFYXNzZXQHXkM6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNcYmRkXG5vdGVzLmNzdn4NAQcFYXNzZXQHFWFzc2V0cy9iZGQvbm90ZXMuY3N2fgdeQzpcVXNlcnNcbGZvZG9cQW5kcm9pZFN0dWRpb1Byb2plY3RzXGRhc2hib2FyZF9ib3Vhcm91cl9mb2RvdW9wX2dhdWRlYXV4XGFzc2V0c1xiZGRcbm90ZXMyLmNzdgwCDQEHBWFzc2V0B15DOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGJkZFxub3RlczIuY3N2DQEHBWFzc2V0BxVhc3NldHMvYmRkL25vdGVzMi5jc3YHY0M6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNcaWNvbmVzXHNldHRpbmdzLnN2ZwwCDQEHBWFzc2V0B2NDOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGljb25lc1xzZXR0aW5ncy5zdmcNAQcFYXNzZXQHGmFzc2V0cy9pY29uZXMvc2V0dGluZ3Muc3ZnB2BDOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGltYWdlc1xjb3Vycy5qcGcMAg0BBwVhc3NldAdgQzpcVXNlcnNcbGZvZG9cQW5kcm9pZFN0dWRpb1Byb2plY3RzXGRhc2hib2FyZF9ib3Vhcm91cl9mb2RvdW9wX2dhdWRlYXV4XGFzc2V0c1xpbWFnZXNcY291cnMuanBnDQEHBWFzc2V0Bxdhc3NldHMvaW1hZ2VzL2NvdXJzLmpwZwdiQzpcVXNlcnNcbGZvZG9cQW5kcm9pZFN0dWRpb1Byb2plY3RzXGRhc2hib2FyZF9ib3Vhcm91cl9mb2RvdW9wX2dhdWRlYXV4XGFzc2V0c1xpbWFnZXNcZGV2b2lycy5qcGcMAg0BBwVhc3NldAdiQzpcVXNlcnNcbGZvZG9cQW5kcm9pZFN0dWRpb1Byb2plY3RzXGRhc2hib2FyZF9ib3Vhcm91cl9mb2RvdW9wX2dhdWRlYXV4XGFzc2V0c1xpbWFnZXNcZGV2b2lycy5qcGcNAQcFYXNzZXQHGWFzc2V0cy9pbWFnZXMvZGV2b2lycy5qcGcHY0M6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNcaW1hZ2VzXG1hdGllcmVzLnBuZwwCDQEHBWFzc2V0B2NDOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGltYWdlc1xtYXRpZXJlcy5wbmcNAQcFYXNzZXQHGmFzc2V0cy9pbWFnZXMvbWF0aWVyZXMucG5nB2VDOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGltYWdlc1xwaG90b19kYXNoLnBuZwwCDQEHBWFzc2V0B2VDOlxVc2Vyc1xsZm9kb1xBbmRyb2lkU3R1ZGlvUHJvamVjdHNcZGFzaGJvYXJkX2JvdWFyb3VyX2ZvZG91b3BfZ2F1ZGVhdXhcYXNzZXRzXGltYWdlc1xwaG90b19kYXNoLnBuZw0BBwVhc3NldAccYXNzZXRzL2ltYWdlcy9waG90b19kYXNoLnBuZwdmQzpcVXNlcnNcbGZvZG9cQW5kcm9pZFN0dWRpb1Byb2plY3RzXGRhc2hib2FyZF9ib3Vhcm91cl9mb2RvdW9wX2dhdWRlYXV4XGFzc2V0c1xpbWFnZXNccGhvdG9fZGFzaDIuanBnDAINAQcFYXNzZXQHZkM6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNcaW1hZ2VzXHBob3RvX2Rhc2gyLmpwZw0BBwVhc3NldAcdYXNzZXRzL2ltYWdlcy9waG90b19kYXNoMi5qcGcHcUM6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNccG9saWNlXFNhd2FyYWJpR290aGljLVJlZ3VsYXIudHRmDAINAQcFYXNzZXQHcUM6XFVzZXJzXGxmb2RvXEFuZHJvaWRTdHVkaW9Qcm9qZWN0c1xkYXNoYm9hcmRfYm91YXJvdXJfZm9kb3VvcF9nYXVkZWF1eFxhc3NldHNccG9saWNlXFNhd2FyYWJpR290aGljLVJlZ3VsYXIudHRmDQEHBWFzc2V0Byhhc3NldHMvcG9saWNlL1Nhd2FyYWJpR290aGljLVJlZ3VsYXIudHRmByhhc3NldHMvcG9saWNlL1Nhd2FyYWJpR290aGljLVJlZ3VsYXIudHRmDAENAQcFYXNzZXQHKGFzc2V0cy9wb2xpY2UvU2F3YXJhYmlHb3RoaWMtUmVndWxhci50dGYHMnBhY2thZ2VzL2N1cGVydGlub19pY29ucy9hc3NldHMvQ3VwZXJ0aW5vSWNvbnMudHRmDAENAQcFYXNzZXQHMnBhY2thZ2VzL2N1cGVydGlub19pY29ucy9hc3NldHMvQ3VwZXJ0aW5vSWNvbnMudHRmByVwYWNrYWdlcy90aW1lem9uZS9kYXRhL2xhdGVzdF9hbGwudHpmDAENAQcFYXNzZXQHJXBhY2thZ2VzL3RpbWV6b25lL2RhdGEvbGF0ZXN0X2FsbC50emY="